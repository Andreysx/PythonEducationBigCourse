# Функции max(), min(), sum()
# Несколько слов о функциях поиска максимума, минимума и подсчёта суммы.
#
# ● Функция max()
# max(iterable, *[, key, default]) или max(arg1, arg2, *args[, key])
# Функция принимает на вход итерируемую последовательность или несколько
# позиционных элементов и ищет максимальное из них. Ключевой параметр key
# указывает на то, какие элементы необходимо сравнить, если объект является
# сложной структурой. Отдельно параметр default используется для возврата
# значения, если на вход передана пустой итератор.
#
# lst_1 = []
# lst_2 = [42, 256, 73]
# lst_3 = [("Иван", 125_000), ("Николай", 96_000), ("Пётр",
# 109_000)]
# print(max(lst_1, default='empty'))
# print(max(*lst_2))
# print(max(lst_3, key=lambda x: x[1]))
#
# В первом случае передана пустая последовательность и функция вернула строку
# empty.
# Во втором — распаковали список и нашли максимальное число.
# В третьем ищем максимальное среди трёх кортежей по элементу с индексом один,
# т.е. по числу.
#
# ● Функция min()
# min(iterable, *[, key, default]) или min(arg1, arg2, *args[, key])
# Функция работает аналогично max, но ищет минимальный элемент.
#
# lst_1 = []
# lst_2 = [42, 256, 73]
# lst_3 = [("Иван", 125_000), ("Николай", 96_000), ("Пётр",
# 109_000)]
# print(min(lst_1, default='empty'))
# print(min(*lst_2))
# print(min(lst_3, key=lambda x: x[1]))
#
# ● Функция sum()
# sum(iterable, /, start=0)
# Функция принимает объект итератор и подсчитывает сумму всех элементов.
# Ключевой аргумент start задаёт начальное значение для суммирования.
# my_list = [42, 256, 73]
# print(sum(my_list))
# print(sum(my_list, start=1024))