# 2. –û—Å–Ω–æ–≤—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å unittest
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –±–æ–ª–µ–µ –º–æ—â–Ω—ã–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑
# –∫–æ—Ä–æ–±–∫–∏. –ú–æ–¥—É–ª—å unittest –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Python –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç
# –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –ë–æ–ª–µ–µ —Ç–æ–≥–æ, unittest –Ω–∞–∑—ã–≤–∞—é—Ç —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ
# –º–æ–¥—É–ª–µ–º.
# –°—Ä–µ–¥–∞ unittest –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–∞ JUnit –∏
# –∏–º–µ–µ—Ç —Ç–æ—Ç –∂–µ –≤–∫—É—Å, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ä–µ–¥—ã –º–æ–¥—É–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö
# —è–∑—ã–∫–∞—Ö. –û–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
# –∫–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤, –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏
# –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏.
# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ JUnit —Å–∫–∞–∑–∞–ª–æ—Å—å –Ω–∞ —Å—Ç–∏–ª–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞, –∞ –∏–º–µ–Ω–Ω–æ
# –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ camelCase –¥–ª—è –∏–º—ë–Ω, –≤–º–µ—Å—Ç–æ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ –¥–ª—è Python
# —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å—Ç–∏–ª—è snake_case.
# –û–±—â–∏–µ –º–æ–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã —Å unittest
# –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—â–∏–µ –º–æ–º–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã —Å unittest –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ
# –∫–æ–¥–∞.
#
# import unittest
#
#
# class TestCaseName(unittest.TestCase):
#     def test_method(self):
#         self.assertEqual(2 * 2, 5, msg='–í–∏–¥–∏–º–æ –∏ –≤ —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π  –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç :-(')
#
# if __name__ == '__main__':
#     unittest.main()
#
# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–∞–º–∏ –∏–ª–∏ –ø–∞–ø–∫—É
# tests, –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ —Å —Ç–µ—Å—Ç–∞–º–∏ –±—É–¥–µ—Ç –º–Ω–æ–≥–æ. –°–º–µ—à–∏–≤–∞—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
# –∫–æ–¥ –∏ —Ç–µ—Å—Ç—ã –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è.
# –í —Ñ–∞–π–ª–µ —Å —Ç–µ—Å—Ç–æ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å unittest –∏ —Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -
# test case. –¢–∞–∫–æ–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç TestCase.
# –í–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞—ë–º –º–µ—Ç–æ–¥—ã, –∏–º–µ–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–æ–≤–∞ test.
# –¢–∞–∫–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.
# –ü–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –æ—Ç –∫–ª–∞—Å—Å–∞ TestCase –∏ –∏–º–µ–Ω–∞–º –º–µ—Ç–æ–¥–æ–≤ unittest –ø–æ–Ω–∏–º–∞–µ—Ç, —á—Ç–æ –ø–µ—Ä–µ–¥
# –Ω–∏–º —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å.
# –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - ‚Äú–∞—Å—Å–µ—Ä—Ç—ã‚Äù. –í –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ
# assertEqual –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: 2 * 2 –∏ 5. –¢–µ—Å—Ç —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–Ω–∏ —Ä–∞–≤–Ω—ã. –ê
# –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Ä–∞–≤–Ω—ã, –±—É–¥–µ—Ç –ø–æ–¥–Ω—è—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ AssertionError —Å —Ç–µ–∫—Å—Ç–æ–º,
# –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –∫–ª—é—á–µ–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ msg.
# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ
# —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–¥–æ–±–Ω—ã–µ ‚Äú–¥–≤–∞–∂–¥—ã –¥–≤–∞ —Ä–∞–≤–Ω–æ –ø—è—Ç–∏‚Äù.
# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main(). –û–Ω–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª, —Å–æ–±–µ—Ä—ë—Ç
# —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã, –∑–∞–ø—É—Å—Ç–∏—Ç –∏ —Å–æ–æ–±—â–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏.
# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤—ã–≥–ª—è–¥–∏—Ç
# –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∑–∞–ø—É—Å–∫—É doctest
# $ python3 -m unittest tests.py -v
# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ doctest –∏ unittest
# –í–æ–∑—å–º—ë–º —É–∂–µ –∑–Ω–∞–∫–æ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞ –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç—É –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º
# –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –≤ doctest —Ç–µ—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è unittest.
#
# –§–∞–π–ª prime.py –±–µ–∑ —Ç–µ—Å—Ç–æ–≤ doctest
# def is_prime(p: int) -> bool:
#
#     if not isinstance(p, int):
#         raise TypeError('The number P must be an integer type')
#     elif p < 2:
#         raise ValueError('The number P must be greater than one')
#     elif p > 100_000_000:
#         print('If the number P is prime, the check may take a long time. Working...')
#
#     for i in range(2, p):
#         if p % i == 0:
#             return False
#         return True
# –ù–∏—á–µ–≥–æ –Ω–æ–≤–æ–≥–æ –≤ –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç.
# –ê —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç —Ñ–∞–π–ª test_prime.py
# import io
# import unittest
# from unittest.mock import patch
# from prime import is_prime
#
# class TestPrime(unittest.TestCase):
#     def test_is_prime(self):
#         self.assertFalse(is_prime(42))
#         self.assertTrue(is_prime(73))
#
#     def test_type(self):
#         self.assertRaises(TypeError, is_prime, 3.14)
#
#     def test_value(self):
#         with self.assertRaises(ValueError):
#             is_prime(-100)
#             is_prime(1)
#
#     @patch('sys.stdout', new_callable=io.StringIO)
#     def test_warning_false(self, mock_stdout):
#         self.assertFalse(is_prime(100_000_001))
#         self.assertEqual(mock_stdout.getvalue(),
#         'If the number P is prime, the check may take a long time. Working...\n')
#
#     @patch('sys.stdout', new_callable=io.StringIO)
#     def test_warning_true(self, mock_stdout):
#         self.assertTrue(is_prime(100_000_007))
#         self.assertEqual(mock_stdout.getvalue(),
#         'If the number P is prime, the check may take a long time. Working...\n')
#
#     if __name__ == '__main__':
#         unittest.main()
#
# –†–∞–∑–±–µ—Ä—ë–º –∫–∞–∂–¥—ã–π –∏–∑ —Ç–µ—Å—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞:
# ‚û¢ –ö–µ–π—Å test_is_prime
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ assertFalse –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å
# –ª–æ–∂—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ assertTrue –æ–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–∏–Ω—É.
# ‚û¢ –ö–µ–π—Å test_type
# –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ assertRaises –æ–∂–∏–¥–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–∏–ø–∞ (–∞—Ä–≥—É–º–µ–Ω—Ç –æ–¥–∏–Ω) –µ—Å–ª–∏ –≤—ã–∑–≤–∞—Ç—å
# —Ñ—É–Ω–∫—Ü–∏—é is_prime (–∞—Ä–≥—É–º–µ–Ω—Ç –¥–≤–∞) –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–π —á–∏—Å–ª–æ 3.14 (–∞—Ä–≥—É–º–µ–Ω—Ç —Ç—Ä–∏).
# ‚û¢ –ö–µ–π—Å test_value
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# –¥–≤–∞–∂–¥—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é. assertRaises –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å –æ—à–∏–±–∫—É
# –∑–Ω–∞—á–µ–Ω–∏—è
# ‚û¢ –ö–µ–π—Å—ã test_warning_false –∏ test_warning_true
# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –û–±–∞ –ø—Ä–∏–º–µ—Ä–∞ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ –æ—Å–Ω–æ–≤ unittest. –≠—Ç–æ —Å–∫–æ—Ä–µ–µ
# –ø—Ä–∏–º–µ—Ä –Ω–∞ –±—É–¥—É—â–µ–µ –¥–ª—è —Å–∞–º—ã—Ö –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã—Ö.
# –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä patch –∏–∑ –º–æ–¥—É–ª—è mock –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫
# –≤—ã–≤–æ–¥–∞ sys.stdout –æ–±—Ä–∞—â–∞—è—Å—å –∫ StringIO –º–æ–¥—É–ª—è –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ io. –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø–∞–¥–∞–µ—Ç
# –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä mock_stdout. –í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ –¥–µ–ª–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ª–æ–∂—å –∏–ª–∏
# –∏—Å—Ç–∏–Ω—É –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞. –ê –¥–∞–ª–µ–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–ª—É—á–∏–ª
# –∑–Ω–∞—á–µ–Ω–∏–µ, —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.
# üî• –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞–∑–±–æ—Ä Mock –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –ª–µ–∫—Ü–∏–∏. –°–∞–º—ã–µ
# –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —è–∑—ã–∫–∞.
# https://docs.python.org/3.11/library/unittest.mock.html
# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ doctest –∏–∑ unittest
# –ê —á—Ç–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç—ã —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ doctest? –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
# test_loader –∏ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã doctest –≤ –ø–µ—Ä–µ—á–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä.
#
# import doctest
# import unittest
# import prime
#
# def load_tests(loader, tests, ignore):
#     tests.addTests(doctest.DocTestSuite(prime))
#     tests.addTests(doctest.DocFileSuite('prime.md'))
#     return tests
#
# if __name__ == '__main__':
# unittest.main()
#
# –û–±—ä–µ–∫—Ç tests –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ addTests –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å prime.
# –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å DocTestSuite –∏–∑ –º–æ–¥—É–ª—è doctest. –ê –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å DocFileSuite. –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è
# unittest.main —Å–æ–±–µ—Ä—ë—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–∞–Ω–Ω–µ–µ —Ç–µ—Å—Ç—ã doctest –∏ –∑–∞–ø—É—Å—Ç–∏—Ç –∏—Ö.
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞ –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç
# –ò–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
# —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Å—Ä–µ–¥—É. –ê –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞–æ–±–æ—Ä–æ—Ç, —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–µ–µ.
# –î–ª—è —ç—Ç–∏—Ö —Ü–µ–ª–µ–π –≤ unittest –µ—Å—Ç—å –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–≤ setUp –∏ tearDown.
# –ß–∞—Å—Ç–æ –∏—Ö –Ω–∞–∑—ã–≤–∞—é—Ç —Ñ–∏–∫—Å—Ç—É—Ä–∞–º–∏.
#
#
# ‚û¢ –ú–µ—Ç–æ–¥ setUp
# –ö–æ–≥–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤, –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ setUp
# –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—ã–∑–æ–≤–æ–º —Ç–µ—Å—Ç–∞.
# import unittest
#
# class TestSample(unittest.TestCase):
#     def setUp(self) -> None:
#         self.data = [2, 3, 5, 7]
#         print('–í—ã–ø–æ–ª–Ω–∏–ª setUp') # –¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞
#
#     def test_append(self):
#         self.data.append(11)
#         self.assertEqual(self.data, [2, 3, 5, 7, 11])
#
#     def test_remove(self):
#         self.data.remove(5)
#         self.assertEqual(self.data, [2, 3, 7])
#
#     def test_pop(self):
#         self.data.pop()
#         self.assertEqual(self.data, [2, 3, 5])
#
# if __name__ == '__main__':
#     unittest.main()
# –í –ø—Ä–∏–º–µ—Ä–µ —Ç—Ä–∏–∂–¥—ã —Å–æ–∑–¥–∞—ë—Ç—Å—è —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–µ—Ç—ã—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞. –ö–∞–∂–¥—ã–π –∏–∑ —Ç–µ—Å—Ç–æ–≤
# –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —á–∏—Å–ª–∞–º–∏ 2, 3, 5, 7 –∏ –Ω–∏–∫–∞–∫ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# —Ä–∞–±–æ—Ç—ã –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤. –ü–æ–¥–æ–±–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —É–¥–æ–±–µ–Ω, –∫–æ–≥–¥–∞ –Ω–∞–¥–æ –ø—Ä–æ–≥–Ω–∞—Ç—å –±–æ–ª—å—à–æ–µ
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.
#
#
# ‚û¢ –ú–µ—Ç–æ–¥ tearDown
# –ú–µ—Ç–æ–¥ tearDown –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ setUp –∏ –≤ —Å–ª—É—á–∞–µ
# –µ—Å–ª–∏ —Ç–µ—Å—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, –∏ –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è.
# import unittest
#
#     class TestSample(unittest.TestCase):
#     def setUp(self) -> None:
#         with open('top_secret.txt', 'w', encoding='utf-8') as f:
#             for i in range(10):
#                  f.write(f'{i:05}\n')
#
#     def test_line(self):
#         with open('top_secret.txt', 'r', encoding='utf-8') as f:
#             for i, line in enumerate(f, start=1):
#                 pass
#             self.assertEqual(i, 10)
#
#     def test_first(self):
#         with open('top_secret.txt', 'r', encoding='utf-8') as f:
#             first = f.read(5)
#             self.assertEqual(first, '00000')
#
#     def tearDown(self) -> None:
#         from pathlib import Path
#         Path('top_secret.txt').unlink()
#
# if __name__ == '__main__':
#     unittest.main()
#
# –í –ø—Ä–∏–º–µ—Ä–µ –º–µ—Ç–æ–¥ setUp —Å–æ–∑–¥–∞—ë—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ —á–∏—Å–µ–ª. –î–≤–∞
# —Ç–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º. –ò –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑
# tearDown –º–µ—Ç–æ–¥–∞.
# –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–ª–∏—Ç—å —Ç–µ—Å—Ç, —Ñ–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.
# –ü–µ—Ä–µ—á–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π assert
# –í —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ unittest —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –æ —Ç–æ–º —á—Ç–æ
# –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç.
# ‚óè assertEqual(a, b) - a == b
# ‚óè assertNotEqual(a, b) - a != b
# ‚óè assertTrue(x) - bool(x) is True
# ‚óè assertFalse(x) - bool(x) is False
# ‚óè assertIs(a, b) - a is b
# ‚óè assertIsNot(a, b) - a is not b
# ‚óè assertIsNone(x) - x is None
# ‚óè assertIsNotNone(x) - x is not None
# ‚óè assertIn(a, b) - a in b
# ‚óè assertNotIn(a, b) - a not in b
# ‚óè assertIsInstance(a, b) - isinstance(a, b)
# ‚óè assertNotIsInstance(a, b) - not isinstance(a, b)
# ‚óè assertRaises(exc, fun, *args, **kwds) - —Ñ—É–Ω–∫—Ü–∏—è fun(*args, **kwds) –ø–æ–¥–Ω–∏–º–∞–µ—Ç
# –∏—Å–∫–ª—é—á–µ–Ω–∏–µ exc
# ‚óè assertRaisesRegex(exc, r, fun, *args, **kwds) - —Ñ—É–Ω–∫—Ü–∏—è fun(*args, **kwds)
# –ø–æ–¥–Ω–∏–º–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ exc –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º
# –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º r
# ‚óè assertWarns(warn, fun, *args, **kwds) - —Ñ—É–Ω–∫—Ü–∏—è fun(*args, **kwds) –ø–æ–¥–Ω–∏–º–∞–µ—Ç
# –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ warn
# ‚óè assertWarnsRegex(warn, r, fun, *args, **kwds) - —Ñ—É–Ω–∫—Ü–∏—è fun(*args, **kwds)
# –ø–æ–¥–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ warn –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º
# –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º r
# ‚óè assertLogs(logger, level) - –±–ª–æ–∫ with –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ logger —Å —É—Ä–æ–≤–Ω–µ–º level
# 20
# ‚óè assertNoLogs(logger, level) - –±–ª–æ–∫ with –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥–∏ –≤ logger —Å —É—Ä–æ–≤–Ω–µ–º
# level
# ‚óè assertAlmostEqual(a, b) - round(a-b, 7) == 0
# ‚óè assertNotAlmostEqual(a, b) - round(a-b, 7) != 0
# ‚óè assertGreater(a, b) - a > b
# ‚óè assertGreaterEqual(a, b) - a >= b
# ‚óè assertLess(a, b) - a < b
# ‚óè assertLessEqual(a, b) - a <= b
# ‚óè assertRegex(s, r) - r.search(s)
# ‚óè assertNotRegex(s, r) - not r.search(s)
# ‚óè assertCountEqual(a, b) - a –∏ b —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º
# –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö –ø–æ—Ä—è–¥–∫–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
# –ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—à–∏—Ä–Ω—ã–π, —á—Ç–æ–±—ã
# —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é —Ç–µ—Å—Ç–æ–≤.
#
#
# –ó–∞–¥–∞–Ω–∏–µ
# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –¥–æ–ª–∂–Ω–∞ –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∞, —á—Ç–æ–±—ã
# –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã. –£ –≤–∞—Å 3 –º–∏–Ω—É—Ç—ã.
# import unittest
# from main import func
#
#
# class TestSample(unittest.TestCase):
#     def setUp(self) -> None:
#         self.data = {'one': 1, 'two': 2, 'three': 3, 'four': 4}
#
#     def test_step_1(self):
#         self.assertEqual(func(self.data), 4)
#
#     def test_step_2(self):
#         self.assertEqual(func(self.data, first=False), 2)
#
#
# if __name__ == '__main__':
# unittest.main()
