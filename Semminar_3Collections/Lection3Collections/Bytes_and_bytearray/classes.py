# Классы bytes и bytearray
# Уделим несколько строк лекции неизменяемым байтам и их изменяемой версии —
# массиву байт. Для отправки информации по каналам связи объекты не подойдут.
# Даже текст не отправить. А вот пересылать байты — легко.
# text_en = 'Hello world!'
# res = text_en.encode('utf-8')
# print(res, type(res))
# text_ru = 'Привет, мир!'
# res = text_ru.encode('utf-8')
# print(res, type(res))
# Строковой метод encode получает в качестве аргумента указание кодировки. На
# выходе получаем строку байт. Функция print возвращает строковое представление
# байт, сами ячейки памяти с электронами невозможно увидеть невооруженным
# глазом.
# b'Hello world!'
# b'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xb2\xd0\xb5\xd1\x82,
# \xd0\xbc\xd0\xb8\xd1\x80!'
# Префикс b говорит о том, что перед нами не строка, а байты. Если байт может быть
# представлен как символ, т.е. он есть в семибитной кодировке ASCII. отображается
# символ. В остальных случаях указывается приставка \x и слитно с ней
# шестнадцатеричное представление байта.
# Для получения набора байт можно использовать функцию bytes. А если необходимо
# изменять байт, использую функцию bytearray.
# x = bytes(b'\xd0\x9f\xd1\x80\xd0\xb8')
# y = bytearray(b'\xd0\x9f\xd1\x80\xd0\xb8')
# print(f'{x = }\n{y = }')
# В качестве аргумента передаётся строковое представление нужным байт.
# Классы байт и массив байт обладают практически всеми методами строк. Кроме
# того для массива байт доступны методы модификации списка list.
# 38
# 7. Вывод
# На этой лекции мы:
# 1. Разобрали, что такое коллекция и какие коллекции есть в Python
# 2. Изучили работу со списками, как с самой популярной коллекцией
# 3. Узнали, как работать со строкой в ключе коллекция
# 4. Разобрали работу с кортежами
# 5. Узнали, что такое словари и как с ними работать
# 6. Изучили множества и особенности работы с ними
# 7. Познакомились с классами байт и массив байт
